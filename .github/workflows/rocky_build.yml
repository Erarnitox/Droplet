name: Build Project on Rocky Linux

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: rockylinux:9  # Use Rocky Linux 9 as the container environment

    steps:
      - name: Install dependencies
        run: |
          dnf install -y epel-release --allowerasing  # Enable EPEL repository for extra packages
          dnf update -y --allowerasing
          dnf install -y wget curl jq git zip unzip openssl openssl-devel openssl-libs zlib zlib-devel postgresql postgresql-devel --allowerasing
          
      - name: Install CMake
        run: |
          CMAKE_VERSION=$(curl -s https://api.github.com/repos/Kitware/CMake/releases/latest | jq -r ".tag_name" | sed 's/v//')
          wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh
          chmod +x cmake-${CMAKE_VERSION}-linux-x86_64.sh
          ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --skip-license --prefix=/usr/local
          rm cmake-${CMAKE_VERSION}-linux-x86_64.sh
          
      - name: Install Ninja
        run: |
          NINJA_VERSION=1.11.0  # Specify the desired version of Ninja
          wget https://github.com/ninja-build/ninja/releases/download/v${NINJA_VERSION}/ninja-linux.zip
          unzip ninja-linux.zip
          chmod +x ninja
          mv ninja /usr/local/bin/
          rm ninja-linux.zip

      - name: Install Clang
        run: |
          dnf install -y clang clang-devel clang-tools-extra --allowerasing

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore build cache
        id: build-cache
        uses: actions/cache@v4
        with:
          path: build
          key: build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Configure and Build with CMake
        env:
          CC: clang
          CXX: clang++
          OPENSSL_ROOT_DIR: /usr/include/openssl
          ZLIB_LIBRARY: /usr/lib64/libz.so
          PostgreSQL_ROOT: /usr/include/pgsql
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          cmake -DZLIB_LIBRARY=$ZLIB_LIBRARY -DPostgreSQL_ROOT=$PostgreSQL_ROOT --preset github
          cmake --build build
          strip build/droplet
      
      - name: Save build cache
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: build
          key: build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
  
      # Deployment steps
      - name: Copy binary to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "build/droplet"
          target: /services/droplet/
          
      # - name: Deploy to Server
      #  if: github.ref == 'refs/heads/main'
      #  env:
      #    SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
      #    SSH_USER: ${{ secrets.SSH_USER }}
      #    SSH_HOST: ${{ secrets.SSH_HOST }}
      #    SSH_PORT: ${{ secrets.SSH_PORT }}
      #    SERVER_DIR: "/bin/droplet"
      #  run: |
      #    mkdir -p ~/.ssh
      #    echo "$SSH_PRIVATE_KEY" > ssh.key
      #    ssh -o StrictHostKeyChecking=no -i ssh.key ${SSH_USER}@${SSH_HOST} -p ${SSH_PORT} << 'EOF'
      #      mkdir /tmp/iwashere
      #    EOF 
